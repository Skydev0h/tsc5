#include "imports/stdlib.fc";

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {

}

(slice, int) is_update_call(slice body) impure asm "x{9df10277} SDBEGINSQ";
(slice, ()) is_claim_call_or_ret(slice body) impure asm "x{bb4be234} SDBEGINSQ" "IFNOTRET";

() recv_external(slice body) impure {

    if (body~is_update_call()) {

        slice signature = body.skip_bits(64).preload_bits(512);
        cell ref = body.preload_ref();
        int hash = cell_hash(ref);
        slice sub = ref.begin_parse();
        int locked_for = sub~load_uint(32);
        int new_seqno = sub.preload_uint(32);

        slice data = get_data().begin_parse();
        int public_key = data~load_uint(256);
        int execution_time = data~load_uint(32);
        slice receiver = data~load_msg_addr();
        int seqno = data.preload_uint(32);

        throw_if(119, new_seqno != seqno + 1);
        throw_unless(120, check_signature(hash, signature, public_key));
        throw_if(121, locked_for <= 0);
        throw_if(122, execution_time < now());
        throw_if(123, now() + locked_for < execution_time);

        accept_message();

        set_data(begin_cell()
            .store_uint(public_key, 256)
            .store_uint(now() + locked_for, 32)
            .store_slice(receiver)
            .store_uint(new_seqno, 32)
            .end_cell());

        return ();
    }

    body~is_claim_call_or_ret();

    slice data = get_data().begin_parse().skip_bits(256);
    int execution_time = data~load_uint(32);
    slice receiver = data~load_msg_addr();
    throw_if(124, execution_time >= now());

    accept_message();

    builder msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(receiver)
        .store_uint(0, 4 + 1 + 4 + 4 + 64 + 32 + 1 + 1);
        send_raw_message(msg.end_cell(), 128);
}

int get_seqno() method_id {
    return get_data().begin_parse().skip_bits(256 + 32 + 3 + 8 + 256).preload_uint(32);
}

int get_execution_time() method_id {
    return get_data().begin_parse().skip_bits(256).preload_uint(32);
}