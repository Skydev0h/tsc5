#include "imports/stdlib.fc";

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {

}

int tlen(tuple list) asm "TLEN";

forall X -> X tget(tuple t, int index) asm "INDEXVAR";
forall X -> (tuple, X) tpop(tuple t) asm "TPOP";

forall X -> tuple tset(tuple t, X value, int index) asm "SETINDEXVAR";
forall X -> (tuple, ()) ~tset(tuple t, X value, int index) asm "SETINDEXVAR";

global int 'len;
global tuple 'maze;

global int n';
global int m';

;; . X S E ? !

() walker(tuple maze, int x, int y, int a, int s) impure inline_ref {
    ;; int c = maze.at(y).at(x);
    ;; ~dump([x, y, a, s, c]);
    if (s != 0) {
        maze~tset(maze.tget(y).tset("!"u, x), y);
    }
    int y' = max(y - 1, 0);
    int n'' = n';
    repeat (min(y + 1, m') - y' + 1) {
        tuple t = maze.at(y');
        int x' = max(x - 1, 0);
        repeat (min(x + 1, n'') - x' + 1) {
            int c' = t.at(x');
            ;; ~dump([x', y', c']);
            if (c' == "."u) {
                walker(maze, x', y', a, s + 1);
            }
            if (c' == "?"u) {
                if (a != 0) {
                    walker(maze, x', y', a - 1, s + 1);
                }
            }
            if (s >= 'len) {
                return ();
            }
            if (c' == "E"u) {
                ;; ~dump([s, maze]);
                if (s + 1 < 'len) {
                    'len = s + 1;
                    'maze = maze;
                }
                return ();
            }
            x' += 1;
        }
        y' += 1;
    }
}

;;-1  obs  len  maze
(int, int, int, tuple) solve_maze(int n, int m, tuple maze) method_id {
    int Sx = 0; int Sy = 0; int n? = 0;
    n' = n - 1; m' = m - 1;
    int y = 0;
    repeat (m) {
        tuple t = maze.at(y);
        int x = 0;
        repeat (n) {
            int c = t.at(x);
            if (c == "S"u) { Sx = x; Sy = y; }
            if (c == "?"u) { n? += 1; }
            x += 1;
        }
        y += 1;
    }
    int a? = 0;
    repeat (n? + 1) {
        'len = 0x100000000;
        'maze = null();
        walker(maze, Sx, Sy, a?, 0);
        ~dump([a?, 'len, 'maze]);
        ifnot ('maze.null?()) {
            return (-1, a?, 'len, 'maze);
        }
        a? = a? + 1;
    }
    return (-1, 0, 0, null());
}
